#include &lt;iostream&gt;
#include &lt;climits&gt;
using namespace std;

class TreeNode
{
public:
int data;
TreeNode *left;
TreeNode *right;
TreeNode(int data){
left = NULL;
right = NULL;
this-&gt;data = data;
}
};

class Tree{
public:
TreeNode *root;
Tree(){
root = NULL;
}

void insert(TreeNode *root, TreeNode *node);
TreeNode *create();
void PrintInorder(TreeNode *root);
void search(TreeNode *root, int key);
int longestPath(TreeNode *root);
int MinInTree(TreeNode *root);
void Mirror(TreeNode *root);

int Max(int a, int b);
int Min(int a, int b);
};

int Tree::Max(int a, int b)
{
int max = (a &gt; b) ? a : b;
return max;
}
int Tree::Min(int a, int b)
{
int min = (a &lt; b) ? a : b;
return min;
}

void Tree::insert(TreeNode *root, TreeNode *node)
{
if (root == NULL)
{
return;
}

if (root-&gt;data &gt; node-&gt;data)
{
if (root-&gt;left == NULL)
root-&gt;left = node;
else
{
insert(root-&gt;left, node);
return;
}
}
else
{
if (root-&gt;right == NULL)
root-&gt;right = node;
else
{
insert(root-&gt;right, node);
return;
}
}
}

TreeNode* Tree::create()
{
char ch;
ch = &#39;y&#39;;
do
{

cout &lt;&lt; &quot;Enter the data for the node: &quot; &lt;&lt; endl;
int newdata;
cin &gt;&gt; newdata;
TreeNode *newNode = new TreeNode(newdata);

if (root == NULL)
root = newNode;

else
{
insert(root, newNode);
}

cout &lt;&lt; &quot;Do you want to continue?(y|n) : &quot;;
cin &gt;&gt; ch;
} while (ch != &#39;n&#39;);

return this-&gt;root;
}

void Tree::PrintInorder(TreeNode *root)
{
if (root == NULL)
return;

PrintInorder(root-&gt;left);
cout &lt;&lt; root-&gt;data &lt;&lt; &quot; &quot;;
PrintInorder(root-&gt;right);
}

void Tree::search(TreeNode *root, int key)
{
if (root == NULL)
{
cout &lt;&lt; &quot;key is not present\n&quot;;
return;
}

if (key &lt; root-&gt;data) search(root-&gt;left, key);
else if (key &gt; root-&gt;data) search(root-&gt;right, key);
else{
cout &lt;&lt; &quot;key is present\n&quot;;

return;
}
}

int Tree::longestPath(TreeNode *root)
{
if (root == NULL)
return 0;

int leftPath = longestPath(root-&gt;left);
int rightPath = longestPath(root-&gt;right);

return Max(leftPath, rightPath) + 1;
}

int Tree::MinInTree(TreeNode *root)
{
if (root == NULL)
return INT_MAX;

int smallestInLeft = MinInTree(root-&gt;left);

int smallestInRight = MinInTree(root-&gt;right);

return Min(root-&gt;data, Min(smallestInLeft, smallestInRight));
}

void Tree::Mirror(TreeNode *root)
{
if (root == NULL)
return;

TreeNode *temp = root-&gt;left;
root-&gt;left = root-&gt;right;
root-&gt;right = temp;

Mirror(root-&gt;left);
Mirror(root-&gt;right);
}

int main()
{

char ch;
cout &lt;&lt; &quot;\nChoose : \n1. Create a tree \n2. Display Tree \n3. Search a
value \n4. To find the number of nodes in the Longest Path \n5. To find
Node with Minimum data \n6. To Mirror the Tree \n7 To stop \n&quot;;
cin &gt;&gt; ch;
TreeNode *root;
Tree Mytree;
while (ch != &#39;7&#39;)
{

if (ch == &#39;1&#39;)
{
root = Mytree.create();
}
else if (ch == &#39;2&#39;)
{
Mytree.PrintInorder(root);
}
else if (ch == &#39;3&#39;)
{
cout &lt;&lt; &quot;Enter the key that want to find in the Tree\n&quot;;

int key;
cin &gt;&gt; key;
Mytree.search(root, key);
}
else if (ch == &#39;4&#39;)
{
cout &lt;&lt; Mytree.longestPath(root);
}
else if (ch == &#39;5&#39;)
{
cout &lt;&lt; Mytree.MinInTree(root);
}
else if (ch == &#39;6&#39;)
{
Mytree.Mirror(root);
Mytree.PrintInorder(root);
}
cout &lt;&lt; &quot;\nChoose : \n1. Create a tree \n2. Display Tree \n3. Search
a value \n4. To find the number of nodes in the Longest Path \n5. To
find Node with Minimum data \n6. To Mirror the Tree \n7 To stop \n&quot;;
cin &gt;&gt; ch;

}
cout &lt;&lt; &quot;Thank You!!&quot;;
}
